<% header(name + ' ' + versionString + ' Release Notes') %>

<p><% name %> version <% versionString %> released on <% releaseDate %></p>

<a name="Introduction"></a><h2>Introduction</h2>
<ul>
	<li>...</li>
</ul>

<a name="MajorChanges"></a><h2>Major Changes</h2>
<ul>
	<li>...</li>
</ul>

<a name="NewFeatures"></a><h2>New Features</h2>
<ul>
	<li>Added If-Modified-Since support to HTTPServlet. A Servlet can provide a
	lastModified() method which returns the modification time of the data.
	This has been integrated into the UnknownFileType servlet for handling
	static files.</li>
	<li>AppServer script detects <code>-u</code> (unbuffered output) and
	<code>-O</code> (optimize) parameters and passes them to Python.
	These parameters must precede any other parameters. Other parameters
	will be passed to <code>ThreadedAppServer</code> normally.</li>
	<li>Configuration files can be written as Python modules
	instead of as Python dictionaries. Any global variables
	in the module are equivalent to top-level keys in the
	configuration dictionary.</li>
	<li><span class="filename">MakeAppWorkDir.py</span> accepts a new option
	<code>-d</code> allowing to point the default context to a location not
	inside the working directory, so you can keep your code completely separate
	from the working directiory. It also accepts <code>-l</code> options to
	add multiple application library dirs to the Python path, and options to
	set the ownership of the working directory files. To see all options,
	run the command without any parameters.</li>
	<li>Added <code>EnterDebuggerOnException</code> option to
	<code>Application.config</code>. If True, and if the AppServer is running
	from an interactive terminal, an uncaught exception will cause the AppServer
	to enter the debugger, allowing the developer to call functions, investigate
	variables, etc. See Python debugger (pdb) docs for more information.
	You will certainly want to turn this off when deploying the site.
	Defaults to False (off).</li>
	<li>The AppServer now includes an experimental built-in HTTP web server.
	See the <a href="InstallGuide.html">InstallGuide</a> for more details.</li>
	<li>Added new <code>Application.config</code> option
	<code>UseCookieSessions</code> that defaults to True. If set to False,
	then a session cookie will never be sent in the response. Use this along
	with <code>UseAutomaticPathSessions</code> to <em>only</em> use path
	sessions and never use cookie sessions.</li>
	<li>Added <code>HTTPRequest.setSessionId()</code> method which allows
	the use of session IDs that are sent via means other than cookies or
	URL parameters (an example would be via an XML-RPC parameter).
	See the docstring for more details.</li>
 	<li>Added <code>DebugAppServer</code>, a single-threaded app server
	that makes it possible to debug servlets using a standard Python
	debugger. I've tested it on Windows only, using both PythonWin
	and JEdit with the JPyDbg plugin.
	See <span class="filename">WebKit/DebugAppServer.py</span> for details.</li>
</ul>

<a name="Improvements"></a><h2>Improvements and Refinements</h2>
<ul>
	<li><code>WebKit.Object</code> now inherits Python's object.
	This affects all other classes for which Super() should now work.</li>
	<li>Unknown file types (those for whom <code>mimetypes.guess_type()</code>
	cannot return something meaningful) are now served up with a mime type of
	<tt>application/octet-stream</tt> instead of <tt>text/html</tt>.</li>
	<li>Fixed incompatibility between the NT Service code and win32all 163.</li>
	<li>AutoReload no longer catches servlet updates (since servlets can be
	reloaded without restarting the entire server anyway).</li>
	<li><code>XMLRPCServlet</code> now allows <code>xmlrpclib.Fault</code>
	exceptions to be passed through unmolested.</li>
	<li><p>Previously, attempting to start an already-running AppServer
	would fail when it couldn't grab the socket to listen on, but it would
	have already overwritten the pid file.</p>
	<p>Now pid file handling is much improved:</p>
	<ul>
		<li>The AppServer will refuse to start if it detects that the pid file
		exists and the process is still running.</li>
		<li>A stale pid file left over from a crash or forcible termination
		will be detected and removed.</li>
		<li>You can override the path of the pid file using the
		<code>PidFile</code> setting in AppServer.config. By default,
		the pid is written to <span class="filename">appserverpid.txt</span>
		in the working directory (or WebKit path if you're not using a working
		directory).</li>
		<li>You can disable the use of the pid file by setting it to
		<code>None</code> in <span class="filename">AppServer.config</span>.
		This seems to be a good idea on Windows because Windows often
		reuses the same pid right away, so if the appserver crashes, and it
		tries to restart and it happens to reuse the same pid, the restart
		will fail.</li>
	</ul></li>
	<li><code>Page</code> has been refactored into <code>HTTPContent</code>
	and <code>Page</code>. <code>HTTPContent</code> can be used as a base
	class for servlets which generate non-HTML content. As <code>Page</code>
	inherits from <code>HTTPContent</code> (which inherits from
	<code>HTTPServlet</code>), <code>Page</code> still contains all the
	methods it previously did, and this change should not require any changes
	to end-user code.</li>
	<li><code>XMLRPCServlets</code> are now allowed to return None as part of
	their marshalled response. This improves usability in an all-Python
	environment at the possible cost of compatibility problems
	with non-Python clients. To revert to the old behavior, where an
	attempt to respond with <code>None</code> caused an exception, add
	<code>allow_none = False</code> to your <code>XMLRPCServlet</code>-derived
	servlets at class level (adding <code>self.allow_none = False</code>
	in the <code>__init__</code> should also work).</li>
	<li>Fixed problem where SessionDynamicStore would unpickle the same object
	twice.</li>
	<li>Added <code>transaction()</code> method to <code>RPCServlet</code>
	so that there's a way for a method to get the transaction object if
	needed.</li>
</ul>

<a name="MinorChanges"></a><h2>Minor API Changes</h2>
<ul>
	<li>The <code>Port</code> setting in
	<span class="filename">AppServer.config</span> has been deprecated in
	favor of the new <code>AdapterPort</code> setting. The <code>Port</code>
	setting in your config file will still be honored, but you are encouraged
	to update your <span class="filename">AppServer.config</span> as the
	<code>Port</code> setting will be removed in the future.</li>
	<li>The scripts <span class="filename">ThreadedAppServerService.py</span>
	in the WebKit directory and <span class="filename">NTService</span> created
	by <span class="filename">MakeAppWorkDir.py</span> were both renamed to
	<span class="filename">AppServerService.py</span>.
</ul>

<a name="Bugfixes"></a><h2>Bugfixes</h2>
<ul>
	<li>Fixed handling of expired sessions. Previously, if you tried to access
	an expired session before the session sweeper thread had cleaned it out,
	you'd get that expired session for one request, but on the second request
	you'd get a new session. Now it correctly returns a new empty session with
	a new session ID on the first request after expiration.</li>
	<li>New debugging feature: by turning on the configuration variable
	<code>IncludeErrorLink<code> in
	<span class="filename">Application.config</span>, an <a href="#">[edit]</a>
	link will be put next to each line in tracebacks. That link will point
	to a file of type <tt>application/x-webkit-edit-file</tt>, which you
	should configure your browser to run with
	<span class="filename">Webware/bin/editfile.py</span> (and edit
	<span class="filename">editfile.py</span> so that it opens your
	editor).</li>
    <li>Removed the <span class="filename">Application.config</span> setting
    <code>OldStyleActions</code> and re-implemented support of the
    <code>methodNameForAction()</code> transformation. Note that "old style"
    actions took an additional <code>transaction</code> parameter, but
    otherwise the action handling is now downward compatible.</li>
	<li>In <code>WebKit.Page</code> resp. <code>WebKit.HTTPContent</code>,
    removed both the internal method <code>_actionSet()</code> and the internal
    dictionary <code>_actionDict</code> which cached the list of actions
	for the servlet. This was redundant code, and its removal allows a servlet
	to use dynamic actions (i.e. to make the action list dependent on the
	permissions of the logged-in user).</li>
	<li>Fixed a bug in <tt>mod_webkit</tt> for Apache&nbsp;2.X that might
	have been causing <tt>mod_webkit</tt> to retry connections to the app
	server unnecessarily in some cases. (This does not apply to the
	Apache&nbsp;1.3 version of <tt>mod_webkit</tt>.)</li>
</ul>

<% footer() %>