<% header(name + " Future Work") %>

<p class="right"><% name %> version <% versionString %></p>


<a name="Warning"></a><h2>Warning</h2>

<p>This document is mostly outdated and out of touch with development. You can find better information about known bugs and future work in the <a href="http://wiki.w4py.org">Wiki</a> and in the <a href="http://sourceforge.net/tracker/?group_id=4866">SourceForge tracker systems</a>, both accessible from the <a href="http://www.webwareforpython.org">Webware Home Page</a>. The SourceForge task manager is currently not used since these systems should be sufficient and we do not want to scatter issues in too many systems.</p>

<a name="Future"></a><h2>Future Work/Limitations</h2>

<p>Sprinkled throughout the code are comments tagged with <b>@@</b> which are hopefully accompanied by a date and someone's initials. These comments represent "TO BE DONE"s. The double at-sign (@@) convention was chosen because it doesn't appear to be used for anything else.</p>

<p>In addition to the inline comments, some significant items have been recorded below. These are future ideas, with no committments or timelines as to when/if they'll be realized. The Python WebKit is open source, so feel free to jump in!</p>

<p>The numbers below are mostly for reference, although longer term items tend to be pushed towards the bottom.</p>

<a name="KnownBugs"></a><h3>Known Bugs</h3>

<ol>
	<li>...</li>
</ol>

<a name="ToDo"></a><h3>To Do</h3>
<ol>

	<li><b>Major Items</b>
	<ol>
	<li>CheckSource.py: A program to check the source code conventions.</li>
	<li>Role-based security and user-authentication. Goal is to eliminate, as much as possible, developer-written security logic. This should be provided by the WebKit and be configurable.</li>
	<li>Write a custom adaptor for Apache, Netscape, MS, etc.</li>
	<li>Distribution and load balancing.</li>
	<li>Fault tolerance.</li>
	<li>More sophisticated admin tools including password protection, clearing logs, displaying a maximum of information at a time, etc. Consider using module 'resource'.</li>
	<li>Investigate case insensitive URLs, especially for the Windows platform.</li>
	<li>Plug-ins
		<ol>
		<li>In ExamplePage, automatically support examples of any plug-in</li>
		<li>Better docs</li>
		<li>Properties.config. 'Load', 0, 1 or the name of the required op sys</li>
		</ol></li>
	</ol></li>

	<li><b>General</b>
	<ol>
	<li>Hunt down: @@ tags (which signify "To Be Done"s), FUTURE items in class doc strings, NotImplementedErrors, -- tags</li>
	<li>Code clean up.</li>
	<li>Right now, if the Application itself (as opposed to Servlets) throws an exception, it doesn't get captured nicely. However, it is displayed in the app server's console.</li>
	<li>The exception handler is pretty nice and has features like logging, e-mail, gathering debugging info, etc. However, on occasions it can throw exceptions too. There should be a simpler, secondary exception handler for when this happens.</li>
	<li>Review the timestamp caching logic and its relation to .pyc files if any.</li>
	<li>Add "Last-modified:" to generic files that are served via WebKit.</li>
	<li>If a Python file has only one class that inherits from Servlet, then use that as the Servlet class (rather than requiring the name be the same as the file).</li>
	</ol></li>

	<li><b>Testing</b>
	<ol>
	<li>Provide testing web page where people can report their testing results including version numbers, etc.</li>
	<li>Provide higher level automation of testing. For example, a testing script should be able to launch various app servers multiple times.</li>
	<li>Provide highly automated benchmarking so we can track changes in performance.</li>
	<li>Expand the regression test suite.</li>
	</ol></li>

	<li><b>Docs</b>
	<ol>
	<li>Add a Getting Started Guide and a Screencast.</li>
	<li>Beef up the User's Guide and Tutorial.</li>
	<li>User's Guide: Create a caching section to discuss the virtues of doing so. Color example became 12 X faster on the server side.</li>

	</ol></li>

	<li><b>Food for thought, considerations, reviews</b>
	<ol>
	<li>Consider including FormKit, FunFormKit or FormEncode:
	A plug-in to aid the construction and validation of forms.</li>
	<li>Consider adding a simple helper lib for generating HTML
	(such as SimpleHTMLGen) to the WebUtils package.</li>
	<li>Support <a href="http://www.python.org/dev/peps/pep-0333/">WSGI</a>.</li>
	<li>Consider this statement from the FastCGI docs: Redirects are handled similar to CGI.  Location headers with values that begin with "/" are treated as internal-redirects; otherwise, they are treated as external redirects (302).</li>
	<li>FastCGI app server: The idea is that if the app server itself supports FastCGI, then it can be used directly with FastCGI enabled web servers sans the infamous "adapter". Dan Green has brought this up in Webware-discuss.</li>
	<li>Consider if we need to support &lt;form action="x.py?a=1" method="post"&gt; where you will have both a query string and posted data.</li>
	<li>Application modifies sys.path so that servlets can say "from SuperServlet import SuperServlet" where SuperServlet is located in the same directory as the Servlet. We'd prefer a more sophisticated technique which does not modify sys.path and does not affect other servlets. (Or maybe this would go away with a new one-process-per-application architecture.)</li>
	</ol></li>

	<li><b>Check out</b>
	<ol>
	<li><a href="http://pythonpaste.org">Python Paste</a></li>
	<li><a href="http://www.djangoproject.com">Django</a></li>
	<li><a href="http://www.turbogears.org">TurboGears</a></li>
	<li><a href="http://pylonshq.com">Pylons</a></li>
	<li><a href="http://webpy.org">web.py</a></li>
	<li><a href="http://aquarium.sourceforge.net">Aquarium</a></li>
	<li><a href="http://www.zope.org/Members/Amos/WhatIsAcquisition">http://www.zope.org/Members/Amos/WhatIsAcquisition</a></li>
	<li><a href="http://www.zope.org/Members/jim/Info/IPC8/AcquisitionAlgebra/index.html">http://www.zope.org/Members/jim/Info/IPC8/AcquisitionAlgebra/index.html</a></li>
	<li>FastCGI related: <a href="http://www.tfarmbruster.com/fcgi_sa.htm">http://www.tfarmbruster.com/fcgi_sa.htm</a></li>
	</ol></li>

	<li><b>Down the road</b>
	<ol>
	<li>Multi-language support/localization (e.g., vend data to clients in their preferred written language)</li>
	<li>Consider CORBA standard RMI-IIOP and it's potential interaction with WebKit. This technology has been marked for inclusion in J2EE. I imagine the idea might be that an app server could be used by more than just web browsers. e.g., it could be used programmatically (in a more natural way than simulating a web client).</li>
	</ol></li>

</ol>

<% footer() %>