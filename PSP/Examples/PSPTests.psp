<%-- This is a PSP comment. It won't show up in the HTML or even in the class that this file will generate --%>

<%@ page imports = "sys,os,time"%> <%-- Here's the modules that I need in this file --%>
<%@ page method="writeHTML" %> <%-- This is the method of the base class that I want to override, writeHTML is the default --%>
<%@ page extends="Page"%> <%--This is the base class for this page.  Page is the default --%>
<%@ page isInstanceSafe="yes" %> <%-- each instance of this class can be used multiple times --%>
<%@ page indentType="tabs" %>



<HTML>
<BODY bgcolor='white'>
<p align = center><img src="psplogo.png"><%-- This image is served by WebKit --%>
<h1 align=center><font color='blue'  face='helvetica'>Hello from PSP!</font></h1><br><br>

<center><h2>This is the sample/test page for an implmentation of Python Server Pages.</h2></center>
<p>What happens if I put a triple quote here? """
<% self.test=5 %>

<p><h3>Read the documentation <a href="PSPDocs.psp">here</a>.</h3>


<br>
<p>The syntax for Python Server Pages is almost identical to that of Java Server Pages (JSP).  Just the scripting language is different! And obviously better.  In fact, just about anything you can do with JSP, you can do with PSP, and more.  With PSP, not only can you create template text that will be inerted in one method when the page is run as a servlet, but you can choose which base class to inherit from, you can choose which method of the base class to over-ride with your template text, and you can add additional methods to the servlet class, all from the PSP template code.  We got a bean equivalent called Can, too. (can of spam, get it?  That's OK, there are others who don't like it either).
<p>
<p>I know, Cool, huh?

<br><br>
The text below comes from another jsp page which was inserted into this one with the &lt%@ incude %> directive.
<p>
<font color="red">
<%@ include file="my_include.psp" %>
</font>

<p>
<p>There are actually two ways to insert the contents of another file into a PSP page.  use &lt%@ include file="somefile" %&gt will effectively insert the contents of the other file before class creation time.<br>
Using &lt psp:include page="somefile"/&gt will insert the file into the page <i>after</i> page creation.  In other words, the file won't be parsed for jsp codes.  It'll just be output as is in the response stream. 
<p>


<font color="blue">
<psp:include file = "APSPinclude.html">
</font>


<b>Below is a loop test</b>


<% for i in range(2): %>
<% self.write('<p>outerloop: ')
self.write(i)%>&nbsp;
<% for n in range(2): %>
<p><i> &nbsp;&nbsp;Inner Loop: <%= n %><br> </i>
<%self.write('Still in the inner loop') %>
<% end %>
<% end %>

<hr>
<b>Unix system info.</b>
<table bgcolor = 'blue'>
<% if os.name == 'posix':
	for i in os.uname():
		res.write('<tr><td><font color="white">'+str(i)+'</font></td></tr>')
%>
</table>
<hr>
<p><b>Path Info: <%=req.pathInfo()%></b>
<hr>
<p><b>Environment Variables</b>
<p><table>
<%
for i in os.environ.keys():
	res.write("<tr><td><font color='red'>"+str(i)+'</font></td><td><font color="blue">'+os.environ[i]+'</font></td></tr>')
%>
</table>
<hr>


<br><%=  time.ctime(time.time())%>

<%-- Comment check --%> <%-- #This kind not even in python file created. --%>
<!-- Comment Check -->  


<psp:method name="testing" params="val">
self._response.write('<br>I\'m a method. ')
self._response.write(val)
</psp:method>

<p>Testing a class method defined in the psp code.<br>
<%self.testing('Howdy!')%>

<% pass %>


<p>Here is a list of the pages you have been to that are tracking compatible:<br>

<% locationCan = self.getCan("locationCan","LocationCan","session")%>

<%locationCan.addLocation(req.pathInfo())
for i in locationCan.locationList():%>
<p><b><%= i %></b>
<% end %>

<p>There's actually only one other page that is tracking compatible, <a href="TrackingExample.psp"> this one </a>



</BODY>
</HTML>

