
<%@ page imports = "sys,os,time,termios"%>
<%@ page method="writeHTML" %>
<%@ page extends="Page"%>
<%@ page isInstanceSafe="no" %>



<HTML>
<BODY bgcolor='white'>
<p align = center><img src="psplogo.png">
<h1 align=center><font color='blue'  face='helvetica'>Hello from PSP!</font></h1><br><br>

<center><h2>This is the sample/test page for an implmentation of Python Server Pages.</h2></center>

<p><h3>Read the documentation <a href="PSPDocs.psp">here</a>.</h3>


<br>
<p>The syntax for Python Server Pages is almost identical to that of Java Server Pages (JSP).  Just the scripting language is different! And obviously better.  In fact, just about anything you can do with JSP, you can do with PSP, and more.  With PSP, not only can you create template text that will be inerted in one method when the page is run as a servlet, but you can choose which base class to inherit from, you can choose which method of the base class to over-ride with your template text, and you can add additional methods to the servlet class, all from the PSP template code.  We got a bean equivalent called Can, too. (can of spam, get it?  That's OK, there are others who don't like it either).
<p>
<p>I know, Cool, huh?

<br><br>
The text below comes from another jsp page which was inserted into this one with the &lt%@ incude %> directive.
<p>
<font color="red">
<%@ include file="my_include.psp" %>
</font>

<p>
<p>There are actually two ways to insert the contents of another file into a PSP page.  use &lt%@ include file="somefile" %&gt will effectively insert the contents of the other file before class creation time.<br>
Using &lt psp:include page="somefile"/&gt will insert the file into the page <i>after</i> page creation.  In other words, the file won't be parsed for jsp codes.  It'll just be output as is in the response stream.  (I haven't finalized this yet, so don't use it.)
<p>


<font color="blue">
<psp:include file = "APSPinclude.html">
</font>


<b>Below is a loop test</b>


<% for i in range(2): %>
<% self.write('<p>outerloop: ')
self.write(i)%>&nbsp;
<% for n in range(2): %>
<p><i> &nbsp;&nbsp;Inner Loop: <%= n %><br> </i>
<% pass %>
<% end %>



<table bgcolor = 'blue'>
<%for i in os.uname():
	res.write('<tr><td><font color="white">'+str(i)+'</font></td></tr>')
res.write('<tr><td>'+req.pathInfo()+'</td></tr>')
%>
</font>
</table>
<br><%=  time.ctime(time.time())%>
<%-- Comment check --%>
<!-- Comment Check -->

<psp:method name="testing" params="val">
self._response.write('<br>boo\n')
self._response.write(val)
</psp:method>

<%self.testing('value')%>

<% pass %>

<%--
<% mycan=self.getCan("mycan","TestCan","session")%>
<%=mycan.test()%>

<% 
if mycan.__dict__.has_key("persistence"):
	self.write("\nGot persistence")
else:
	mycan.persistence="Yes!"
%> 
--%>

</BODY>
</HTML>

