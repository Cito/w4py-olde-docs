<%-- This is a PSP comment. It won't show up in the HTML or even in the class that this file will generate --%>


<%@ page imports = "sys,os,time,PSPExamplePage:PSPExamplePage"%> <%-- Here's the modules that I need in this file --%>
<%@ page method="writeContent" %> <%-- This is the method of the base class that I want to override, writeHTML is the default --%>
<%@ page extends="PSPExamplePage"%> <%--This is the base class for this page.  Page is the default --%>
<%@ page isInstanceSafe="yes" %> <%-- each instance of this class can be used multiple times --%>
<%@ page indentType="tabs" %> <%-- use tabs to indent the sourcefile that this template will produce --%>


<%--  Method declaration Test --%>
<psp:method name="title" params="">
return "PSP Hello"
</psp:method>

<HTML>
<BODY bgcolor='white'>
<p align = center><img src="psplogo.png"><%-- This image is served by WebKit --%>
<h1 align=center><font color='blue'  face='helvetica'>Hello from PSP!</font></h1><br><br>


<p>PSP allows you to write a WebKit servlet using only html and interspersed python statements.

<p><h3>Read the documentation <a href="PSPDocs.psp">here</a>.</h3>


<br>
<p>The syntax for Python Server Pages is almost identical to that of Java Server Pages (JSP).  Just the scripting language is different! And obviously better.  In fact, just about anything you can do with JSP, you can do with PSP, and more.  With PSP, not only can you create template text that will be inerted in one method when the page is run as a servlet, but you can choose which base class to inherit from, you can choose which method of the base class to over-ride with your template text, and you can add additional methods to the servlet class, all from the PSP template code.  We have a bean equivalent called Can, too. (can of spam, get it?  That's OK, there are others who don't like it either).
<p>


<p>
<p>Since examples get added and removed here periodically, I'll just list links to the other examples below.  The main one is PSPTests.psp, which pretty much shows the syntax for PSP.  A truly wimpy Can example is at the bottom of PSPTests.
<p>


<%
import glob
filesyspath=self.request().serverSidePath()
files=glob.glob(os.path.join(os.path.dirname(filesyspath),"*.psp"))
for i in files:
	file=os.path.split(i)[1]$%>   <%-- AhHa! Here's where we need the complex block syntax. OKay.  --%>

<a href="<%=file%>"> <%= file %></a><br>

<% end %>



<p>
<p><i>Note: The above files were generated using a loop that utilized the "userIndent" feature that's new for WebKit 0.4.</i>

<p>
<p>So anyway, read through the docs, and look at PSPTests.psp for examples.  Let us know what we can do better or more effectively.


</BODY>
</HTML>

